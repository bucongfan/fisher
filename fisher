#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use Data::Dumper;
use Storable qw(dclone);
my $usage = "
Dcription:
        The design philosophy of brentcaodeng fisher.pl is of great importance i                                                                  n our daily work.
        Say thanks to my best enlightened tutor and friend brentcaodeng.
        I reimplemented this script based on my own logic.
                                                                      --By Congf                                                                  anBu
                                                                      2019-10-30
                                                                      qwerpoiupk                                                                  \@126.com
Version:
        1.3, In table mode, the fc and bc can be format customized
Usage:
  % fishInWinter.pl [options] <bait_file> <fish_file>
    --bformat  <str>    set bait file format, fasta|table|fq
    --fformat  <str>    set fish file format, fasta|table|gff|fq|gff3|gtf|vcf
    --bcolumn  <num>    set bait file column, default=1, or it can be 1:3-4 cust                                                                  omized
    --fcolumn  <num>    set fish file column, default=1, or it can be 1:3-4 cust                                                                  omized
    --except   <boo>    get things not in the bait file
    --maxcount <int>    stop after NUM matches
    --split    <str>    separator when fisher, <table> or <space>, default=table
    --test     <boo>    output bc and fc contant to test
    --nongreed <boo>    only print minimum number of coincident line, which very                                                                   adapt that query is uniq in subject
    --version  <boo>    print version and change log
    --note     <boo>    also print #
    |--patternmode      change to pattern mode, do not need exact same
    |--genemode         change to gene mode, get things belonged to same gene, (                                                                  for gff3 and gtf)
                        For gff3/gtf file, we can extract subset based on gene o                                                                  r mRNA id. If
                        turn on this switch, all terms related to the same gene                                                                   will be extracted,
                        even through your input bait is mRNA id.
Notes:
        Due to time constraints, --nonpreed and --maxcount are currently only im                                                                  plemented in Fasta and Table (version 1.2)
        Use the Nongreed parameter with caution unless you are sure of the exact                                                                   number in the pool
        The --maxcount and --nongreed may be used together to maximize fishing s                                                                  peed
        The except parameter does not support nongreed matching
";

my $changelog = "
Script:
        fish in winter
Currently version:
        1.3     bucf\@big.ac.cn 20211117
Change log:
        1.1     Add --uniq and --split para for accelerate fishing target line
        1.2     Change the bool para --uniq to int para, which has same philosop                                                                  hy for grep -m, and change the
                --uniq to --maxcount|-m for memorization
        1.3     In table mode, the fc and bc can be format customized, such as 1                                                                  :3-4

";

my ($bf, $ff) = ("table", "table");
my ($bc, $fc) = ("1",     "1");
my $split = 'table';
my ($except, $maxcount, $nongreed, $version) = (0, 0, 0, 0);
my ($test,$annot);

GetOptions('except!'      => \$except,
           'bf:s'         => \$bf,
           'ff:s'         => \$ff,
           'bc:s'         => \$bc,
           'fc:s'         => \$fc,
           'maxcount|m:i' => \$maxcount,
           'nongreed|n!'  => \$nongreed,
           'version|v!'   => \$version,
           'test!'   => \$test,
           'split:s'      => \$split,
           'note!'              =>\$annot
);

print "$changelog\n" and exit 0 if $version;
print "$usage\n" and exit 0 if !$ARGV[0] || !$ARGV[1];

#print "--->$maxcount<---" and exit 0;

my $hash     = {};
my $hash_tmp = {};
my $hash_m   = {};    #use to delete entry which already output

table('bait', $ARGV[0], $bc)         if $bf eq "table";
fasta('bait', $ARGV[0], $bc)         if $bf eq "fasta";
fastq('bait', $ARGV[0], $bc)         if $bf eq "fastq";
transcript_id('bait', $ARGV[0], $bc) if $bf eq "transcript_id";
gene_id('bait', $ARGV[0], $bc) if $bf eq "gene_id";
gene_name('bait', $ARGV[0], $bc) if $bf eq "gene_name";

table('pool', $ARGV[1], $fc)         if $ff eq "table";
fasta('pool', $ARGV[1], $fc)         if $ff eq "fasta";
fastq('pool', $ARGV[1], $fc)         if $ff eq "fastq";
transcript_id('pool', $ARGV[0], $bc) if $bf eq "transcript_id";
gene_id('pool', $ARGV[1], $fc) if $ff eq "gene_id";
gene_name('pool', $ARGV[1], $fc) if $ff eq "gene_name";

#except() if $except;

#print Dumper $hash;
exit;
####################################################sub function################                                                                  #############################

sub fish {
  my $head = shift;
  my $fish;
  if (!$except) {
    if (exists $hash->{pool}->{$head}) {
      foreach my $timer (sort keys %{$hash->{pool}->{$head}}) {
        $fish = $hash->{pool}->{$head}->{$timer};
        if ($ff eq "fasta") {
          print ">$fish";
        } else {
          print "$fish\n";
        }
      }
    }
  } elsif ($except) {
    $hash_tmp->{$head}++;
  }
}

sub except {
  my $fish;
  foreach my $head (keys %{$hash->{pool}}) {
    next if exists $hash_tmp->{$head};
    foreach my $timer (keys %{$hash->{pool}->{$head}}) {
      $fish = $hash->{pool}->{$head}->{$timer};
      if ($ff eq "fasta") {
        print ">$fish";
      } else {
        print "$fish\n";
      }
    }
  }
}

sub getName {

  my $splitor = shift;
  my @split;
  @split=split/\t/, shift if $splitor eq 'table';
  @split=split/\s+/, shift if $splitor eq 'space';
  my $rule  = shift;

  my (@value_list, @rule_list);
  while ($rule =~ /(\d+)/g) {
        return '---NonEnoughSplit---'  if $#split < $1 - 1;
    push(@value_list, $split[$1 - 1]);
  }
  while ($rule =~ /([^\d+])/g) {
    push(@rule_list, $1);
  }

  #print "1-->",join("=",@value_list),"\n";
  #print "2-->",join("=",@rule_list),"\n";
  #print "3-->$rule\n";

  my $real_value = "";
  for (my $i = 0; $i <= $#value_list; $i++) {
    if ($i == $#value_list) {
      $real_value .= $value_list[$i];
    } else {
      $real_value .= $value_list[$i] . $rule_list[$i];
    }

  }

  return $real_value;

}

sub table {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  while (<In>) {
    chomp;
    next if $_ =~ m/^\s*$/g;
    my $head;
    $head = getName($split,$_,$col);
    if ($test){
    print STDERR "$id--->$head\n";
    return;
    }
    next if $head eq '---NonEnoughSplit---';
    #print STDERR "#bait-->$head\n" if $id eq "bait";
    $hash->{$id}->{$head} = 0 if $id eq "bait";
    print $_,"\n" if $id eq "pool" && $annot && $_=~/^#/;
    if ($id eq "pool" && exists $hash->{bait}->{$head} && !$except) {
      next if exists $hash->{uniq}->{$head} && $hash->{uniq}->{$head} == $maxcou                                                                  nt;

      print "$_\n";
      $hash->{uniq}->{$head}++;
      delete $hash_m->{$head} if $nongreed && !$maxcount;
      delete $hash_m->{$head} if $nongreed && $maxcount && $hash->{uniq}->{$head                                                                  } == $maxcount;
      return                  if $nongreed && !keys %{$hash_m};

    } elsif ($id eq "pool" && !exists $hash->{bait}->{$head} && $except) {
      if ($maxcount) {
        next if exists $hash->{uniq}->{$head};
        print "$_\n";
      } else {
        print "$_\n";
      }
      $hash->{uniq}->{$head}++;
    }
  }
  close In;
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

sub transcript_id {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  $col = $col - 1;
  my $timer = 0;
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  while (<In>) {
    chomp;
    next if $_ =~ m/^\s*$/g;
    next if $_ =~ /^#/;
    $timer++;
    my $infor;
    $infor = (split /\t/, $_)[8];
    my ($head) = $infor =~ /transcript_id\s"(\S+)"/;
    $hash->{$id}->{$head} = 0 if $id eq "bait";
    print "$_\n" if $id eq "pool" && exists $hash->{bait}->{$head}  && !$except;
    print "$_\n" if $id eq "pool" && !exists $hash->{bait}->{$head} && $except;
  }
  close In;
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

sub gene_id {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  $col = $col - 1;
  my $timer = 0;
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  while (<In>) {
    chomp;
    next if $_ =~ m/^\s*$/g;
    next if $_ =~ /^#/;
    $timer++;
    my $infor;
    $infor = (split /\t/, $_)[8];
    my ($head) = $infor =~ /gene_id\s"(\S+)"/;
    $hash->{$id}->{$head} = 0 if $id eq "bait";
    print "$_\n" if $id eq "pool" && exists $hash->{bait}->{$head}  && !$except;
    print "$_\n" if $id eq "pool" && !exists $hash->{bait}->{$head} && $except;
  }
  close In;
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

sub gene_name {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  $col = $col - 1;
  my $timer = 0;
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  while (<In>) {
    chomp;
    next if $_ =~ m/^\s*$/g;
    next if $_ =~ /^#/;
    $timer++;
    my $infor;
    $infor = (split /\t/, $_)[8];
    my ($head) = $infor =~ /gene_name\s"(\S+)"/;
    $hash->{$id}->{$head} = 0 if $id eq "bait";
    print "$_\n" if $id eq "pool" && exists $hash->{bait}->{$head}  && !$except;
    print "$_\n" if $id eq "pool" && !exists $hash->{bait}->{$head} && $except;
  }
  close In;
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

sub fasta {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  $col = $col - 1;
  my $timer = 0;
  $/ = ">";
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  <In>;
  while (<In>) {
    chomp;
    next if /^\s*$/g;
    $timer++;
    my ($head, $body) = split /\n/, $_, 2;
    my $header;
    $header = (split /\s+/, $head)[$col] if $split eq 'space';
    $header = (split /\t/,  $head)[$col] if $split eq 'table';
    $body =~ s/\n//g;
    $hash->{$id}->{$header} = 0 if $id eq "bait";

    if ($id eq "pool" && exists $hash->{bait}->{$header} && !$except) {

      next if exists $hash->{uniq}->{$head} && $hash->{uniq}->{$head} == $maxcou                                                                  nt;
      print ">$head\n$body\n";
      $hash->{uniq}->{$head}++;
      delete $hash_m->{$head} if $nongreed && !$maxcount;
      delete $hash_m->{$head} if $nongreed && $maxcount && $hash->{uniq}->{$head                                                                  } == $maxcount;
      return                  if $nongreed && !keys %{$hash_m};

    } elsif ($id eq "pool" && !exists $hash->{bait}->{$header} && $except) {
      if ($maxcount) {
        next if exists $hash->{uniq}->{$header};
        print ">$head\n$body\n";
      } else {
        print ">$head\n$body\n";
      }
      $hash->{uniq}->{$head}++;
    }
  }
  close In;
  $/      = "\n";
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

sub fastq {
  my $id   = shift;
  my $file = shift;
  my $col  = shift;
  $col = $col - 1;
  my $timer = 0;
  my $n     = 0;
  if ($file =~ m/\.gz$/) {
    open In, "gzip -dc $file| ";
  } else {
    open In, "$file";
  }
  while (<In>) {
    chomp;
    $timer++;
    next if /^\s+$/;
    if ($n % 4 == 0 && $_ =~ m/^@/) {
      my $head;
      $head = (split /\t/,  $_)[$col] if $split eq 'table';
      $head = (split /\s+/, $_)[$col] if $split eq 'space';
      $head =~ s/^@//;
      my $line2 = <In>;
      my $line3 = <In>;
      my $line4 = <In>;
      chomp $line2;
      chomp $line3;
      chomp $line4;
      $hash->{$id}->{$head} = 0 if $id eq "bait";
      print "$_\n$line2\n$line3\n$line4\n" if $id eq "pool" && exists $hash->{ba                                                                  it}->{$head}  && !$except;
      print "$_\n$line2\n$line3\n$line4\n" if $id eq "pool" && !exists $hash->{b                                                                  ait}->{$head} && $except;
      $n += 4;
    }
  }
  close In;
  $/      = "\n";
  $hash_m = dclone($hash->{bait}) if $nongreed && $id eq "bait";
}

